version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end 
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
    
    
  install_ansible:
    description: Install Ansible
    steps:
      - checkout
      - restore_cache: 
          keys: [dependency-cache]
      - run:
          name: Install Ansible
          command: 
            python3 -m pip install --user ansible



  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [dependency-cache]
      - run:
          name: Install Node.js 13.8.0
          command: |
           
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - checkout
      - restore_cache:
          keys:  [dependency-cache]
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

    

  revert-migrations:
    description: Revert the last migration 
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [fronted-test]
      - run:
          name: Run frontend test
          command: |
            cd frontend 
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node

    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run backend test
          command: |
            cd backend 
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm  audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm  audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [deploy-infra]
      - run:
          name: Install tar
          command: |
            cd backend
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeoplekurves \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeoplekurves \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
     
      
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["db:7a:24:8c:fa:e4:30:ab:2f:6b:d1:c0:6c:8c:c7:99"]

      - attach_workspace:
           at: ~/

      - run:
          name: Install dependencies
          command: |
            pip install  ansible 
           
           

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook configure-server.yml -i inventory.txt
     
      - destroy-environment

  run-migrations:
    docker:
      - image :  cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "No migrations are pending" 
            fi
          
      - destroy-environment
      - revert-migrations



  deploy-frontend:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - install_nodejs
      - install_awscli
      - install_ansible 
     
      - restore_cache:
          keys: [backend-deps]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install    

      - run:
          name: Get backend url
          command: |

            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
          
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment 
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-deps]

      - add_ssh_keys:
          fingerprints: ["db:7a:24:8c:fa:e4:30:ab:2f:6b:d1:c0:6c:8c:c7:99"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            npm install gzip pm2 tree curl rsync openssh

      - run:
          name: Deploy  backend
          command: |
            cd backend
            npm install
            npm run build

            cd ..
            tar -C backend -czvf artifact.tar.gz .

            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            # ls ~/project/.circleci/ansible/roles/deploy/files/

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------$(cat inventory.txt)"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
          
      - destroy-environment
      - revert-migrations   

     
  smoke-test:
    docker:
      - image: cimg/python:3.10 
    steps:
      - checkout
      - install_nodejs
      - install_awscli
      - install_ansible 
      
      
      - run:
          name: Install dependencies
          command: |
            npm install tar npm curl gzip
    
      - run:
          name: Backend smoke test.
          command: |

            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
          
            if curl -s $API_URL/api/status | grep "ok"
            then
               exit 0
            else
               exit 1
            fi
    
           
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              
               exit 0
            else
               exit 1
            fi
      - destroy-environment
      - revert-migrations

  
  cloudfront-update:
    docker:
      - image: cimg/python:3.10 
    steps:
      - checkout
      - install_awscli
      - install_nodejs

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            npm install
      - run:
          name: Update cloudfront distribution
          command: |

            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            echo $OldWorkflowID >> .circleci/ansible/OldWorkflowID.txt
            cat .circleci/ansible/OldWorkflowID.txt 
        
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
           
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CurrentWorkflowID: "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
          
      - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/OldWorkflowID.txt
      - destroy-environment
      - revert-migrations        
  
  cleanup:
    docker:
      - image: cimg/python:3.10 
    steps:
      
      - checkout
      - install_awscli
      - install_nodejs
 
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            npm install

      - run:
          name: Get old stack workflow id
          command: |
           
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "Delete completed"
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo 'cleanup cannot be done'
            fi

      - destroy-environment
      - revert-migrations      



  notify:
    docker:
      - image: "cimg/base:stable"
    steps:
      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: 03-cloud-devops
          event: pass
          template: success_tagged_deploy_1

      - slack/notify:
          channel: 03-cloud-devops
          event: pass
          template: basic_success_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]

      - test-backend:
          requires: [build-backend]

      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]

      - notify:
          context: kurves-secrets

      - deploy-infrastructure:
           requires: [test-frontend, test-backend,scan-frontend, scan-backend]
          #  filters:
          #    branches:
          #      only: [dev-branch]
      
      
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      
      - run-migrations:
          requires: [configure-infrastructure]
     
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]  
      # - cleanup:
      #     requires: [cloudfront-update]